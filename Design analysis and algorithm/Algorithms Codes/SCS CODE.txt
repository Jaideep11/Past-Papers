# Function to find the length of LCS of substring X[0..m-1] and Y[0..n-1]
def LCSLength(X, Y, m, n, lookup):
 
    # return if we have reached the end of either string
    if m == 0 or n == 0:
        return 0
 
    # construct an unique dict key from dynamic elements of the input
    key = (m, n)
 
    # if sub-problem is seen for the first time, solve it and
    # store its result in a dict
    if key not in lookup:
        # if last character of X and Y matches
        if X[m - 1] == Y[n - 1]:
            lookup[key] = LCSLength(X, Y, m - 1, n - 1, lookup) + 1
        else:
            # else if last character of X and Y don't match
            lookup[key] = max(LCSLength(X, Y, m, n - 1, lookup),
                                        LCSLength(X, Y, m - 1, n, lookup))
 
    # return the sub-problem solution from the dict
    return lookup[key]
 
 
if __name__ == '__main__':
 
    X = input('Enter First String: ')
    Y = input('Enter Second String: ')
 
    m = len(X)
    n = len(Y)
 
    # create a dictionary to store solutions of sub-problems
    lookup = {}
 
    # find length of longest common subsequence (LCS)
    length = LCSLength(X, Y, m, n, lookup)
 
    # length of shortest common supersequence of two strings
    # is equal to the sum of both strings minus length of
    # their longest common subsequence
 
    print("The Length of Shortest Common Supersequence is", (m + n - length))